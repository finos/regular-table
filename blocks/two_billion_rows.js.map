{"version":3,"sources":["two_billion_rows.md"],"names":[],"mappings":"AAqBC,MAAA,QAAA,GAAA,UAAA;AACA,MAAA,WAAA,GAAA,IAAA;AAOA,OAAA,SAAA,YAAA,CAAA,QAAA,EAAA,WAAA,EAAA;AACA,SAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA;AACA,IAAA,QADA;AAEA,IAAA,WAFA;AAGA,IAAA,WAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAHA;AAIA,IAAA,cAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAJA;AAKA,IAAA,IAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IACA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IAAA,SAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CADA;AALA,GAAA,CAAA;AASA;;AAOA,SAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA;AACA,SAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,EAAA,GAAA,EAAA,CAAA,CAAA,IAAA,EAAA,EAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA;;AAQA,SAAA,YAAA,CAAA,IAAA,EAAA,CAAA,EAAA;AACA,QAAA,KAAA,GAAA,KAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,SAAA,CAAA,SAAA,KAAA,EAAA,EAAA,GAAA,IAAA,IAAA,SAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AACA;;AAMA,MAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,KAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA;;AASA,OAAA,SAAA,IAAA,GAAA;AACA,QAAA,KAAA,GAAA,QAAA,CAAA,oBAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AACA,QAAA,EAAA,GAAA,YAAA,CAAA,QAAA,EAAA,WAAA,CAAA;AACA,EAAA,KAAA,CAAA,eAAA,CAAA,EAAA;AACA,EAAA,KAAA,CAAA,IAAA;AACA;AAwCA,MAAA,SAAA,GAAA,IAAA,IAAA,CAAA,YAAA,CAAA,OAAA,CAAA","sourcesContent":["# Two Billion Rows\n\nAn example of a [`regular-table`](https://github.com/finos/regular-table)\ndata model which generates data on-the-fly to simulate a 2,000,000,000 row\n`<table>`.\n\n## HTML\n\nYou'll need a `<regular-table>` for this example, which you can create in HTML:\n\n```html\n<regular-table></regular-table>\n```\n\n## Virtual Data Model\n\nTo simulate a _really big_ data set, this model will take advantage of the\n`regular-table` Virtual Data Model to generate data only for the window\ncurrently visible on screen.  This is how _really big_:\n\n```javascript\nconst NUM_ROWS = 2000000000;\nconst NUM_COLUMNS = 1000;\n```\n\nThe `dataListener` function for this virtual data set is simple, and\nreturns the static dimensions directly:\n\n```javascript\nexport function dataListener(num_rows, num_columns) {\n    return (x0, y0, x1, y1) => ({\n        num_rows,\n        num_columns,\n        row_headers: range(y0, y1, group_header.bind(null, \"Row\")),\n        column_headers: range(x0, x1, group_header.bind(null, \"Column\")),\n        data: range(x0, x1, (x) =>\n            range(y0, y1, (y) => formatter.format(x + y))\n        ),\n    });\n}\n```\n\nIt makes copious use of the `range()` function, which generates a\nsequence from [`x0` .. `x1`], mapped by the function argument `f()`.\n\n```javascript\nfunction range(x0, x1, f) {\n    return Array.from(Array(x1 - x0).keys()).map((x) => f(x + x0));\n}\n```\n\nGenerated row and column headers, as well as header groups for every\ngroup of 10, are also done on demand via `group_header()`, this time\nusing the `clamp()` function.\n\n```javascript\nfunction group_header(name, i) {\n    const group = clamp(i, 10);\n    return [`Group ${group}`, `${name} ${formatter.format(i)}`];\n}\n```\n\n`clamp()` formats a number `x` to it's nearest `y`\n\n```javascript\nconst clamp = (x, y) => formatter.format(Math.floor(x / y) * y);\n```\n\n## `regular-table` Initialization\n\nWith these, all that's left is to register the `dataListener` and draw the\n`<table>`.\n\n```javascript\nexport function init() {\n    const table = document.getElementsByTagName(\"regular-table\")[0];\n    const dl = dataListener(NUM_ROWS, NUM_COLUMNS);\n    table.setDataListener(dl);\n    table.draw();\n}\n```\n\nWe'll initialize this table within a `<script>` tag, so that this \".js\" output\nfrom `literally` of this Markdown file will not initialize, allowing\n`dataListener()` to be re-used as a data model in other examples.\n\n```html\n<script type=\"module\">\n    import {init} from \"/dist/examples/two_billion_rows.js\";\n    window.addEventListener(\"load\", () => init());\n</script>\n```\n\n## Styling\n\nWe want to distinguish the cells from the headers:\n\n```css\ntd {\n    color: #1078d1;\n}\n```\n\nAnd some special styling to separate the `row_headers` from the\n`column_headers`:\n\n```css\ntbody th:last-of-type,\nthead tr:nth-child(2) th:nth-child(2),\nthead tr:first-child th:first-child {\n    border-right: 1px solid #ddd;\n}\n```\n\n## Appendix (Utilities)\n\nA formatter for Numbers:\n\n```javascript\nconst formatter = new Intl.NumberFormat(\"en-us\");\n```\n\n## Appendix (Dependencies)\n\n```html\n<script src=\"/dist/umd/regular-table.js\"></script>\n<link rel='stylesheet' href=\"/dist/css/material.css\">\n```\n\n```block\nlicense: apache-2.0\n```\n\n"]}