{"version":3,"sources":["minesweeper.md"],"names":[],"mappings":"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","sourcesContent":["## Minesweeper\n\nA clone of the classic game Minesweeper with 1,000,000 cells, built with\n[`regular-table`](https://github.com/finos/regular-table).\n\n```html\n<regular-table id=\"table\"></regular-table>\n```\n\n# Game State and Virtual Data Model\n\nThe basic game dimensions.\n\n```javascript\nconst WIDTH = 1000;\nconst HEIGHT = 1000;\nconst NUM_MINES = 130000;\n```\n\nWe are going to encode teh game state in a single two dimensional array of\ninteger cell state Enums.  0-8 will be \"hints\", cells with a number representing\nthe total neighboring mines, and we'll want to encode a few additional special\nstates.\n\n```javascript\nconst FLAG_ENUM = 10;\nconst FLAG_MINE_ENUM = 9;\nconst HIDDEN_ENUM = 12;\nconst HIDDEN_MINE_ENUM = 11;\nconst EXPLODED_ENUM = 13;\n```\n\nBecause the Player's view does not reveal all information about the game state,\nwe will need to calculate some sets out of groups of enums.  For example,\nboth an empty and mine-containing cell, when un-revealed, will be drawn as a\n`.brick` cell using `HIDDEN_ENUMS`.\n\n```javascript\nconst FLAG_ENUMS = new Set([FLAG_ENUM, FLAG_MINE_ENUM]);\nconst HIDDEN_ENUMS = new Set([HIDDEN_ENUM, HIDDEN_MINE_ENUM]);\nconst MINE_ENUMS = new Set([HIDDEN_MINE_ENUM, FLAG_MINE_ENUM]);\nconst HINT_ENUMS = new Set(Array.from(Array(9).keys()));\n```\n\nThe game board begins hidden, with mines randomly distributed throughout.\nLittle effort is made in this example to create a competition-approved\ndistribution, so be sure to avoid using this particular implementation in\nany Leagues, Tournaments or Grand Championships.\n\n```javascript\nconst VIEW_DATA = Array(WIDTH)\n    .fill(0)\n    .map(() => Array(HEIGHT).fill(HIDDEN_ENUM));\n\nfor (let i = 0; i < NUM_MINES; i++) {\n    const x = Math.floor(Math.random() * WIDTH);\n    const y = Math.floor(Math.random() * HEIGHT);\n    VIEW_DATA[x][y] = HIDDEN_MINE_ENUM;\n}\n```\n\nVirtual Data Model.\n\n```javascript\nfunction dataListener(x0, y0, x1, y1) {\n    return {\n        num_rows: VIEW_DATA[0].length,\n        num_columns: VIEW_DATA.length,\n        data: VIEW_DATA.slice(x0, x1).map((col) => col.slice(y0, y1)),\n    };\n}\n```\n\n# Game Logic\n\nThe basic unit of calculating player moves is `getNeighbors()`, a generator\nfunction which yields the coordinates of all neighboring cells which are\nmembers of a `Set()`.  We'll use this to implement a breadth-first search which\nrespects the game rules, board edges, etc.\n\n```javascript\nfunction* getNeighbors(x, y, _set) {\n    for (let dx = -1; dx < 2; dx++) {\n        for (let dy = -1; dy < 2; dy++) {\n            if (dx !== 0 || dy !== 0) {\n                const x2 = x + dx;\n                const y2 = y + dy;\n                if (x2 >= 0 && x2 < WIDTH && y2 >= 0 && y2 < HEIGHT) {\n                    if (_set.has(VIEW_DATA[x2][y2])) {\n                        yield [x2, y2];\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nThere are three \"actions\" the player can make in Minesweeper `detonate()`,\n`flag()` and `check()`.  The `detonate()` action, applied to a blank cell, will\nfill the cell with a number 0-8, the number of neighboring mines.  If this\nnumber is 0, the neighboring cells will be recursively `detonate()`-ed as well.\n\n```javascript\nfunction detonate(x, y) {\n    if (MINE_ENUMS.has(VIEW_DATA[x][y])) {\n        VIEW_DATA[x][y] = EXPLODED_ENUM;\n        table.classList.add(\"game-over\");\n        return;\n    }\n\n    let num_neighbor_mines = 0;\n    for (const [] of getNeighbors(x, y, MINE_ENUMS)) {\n        num_neighbor_mines++;\n    }\n\n    VIEW_DATA[x][y] = num_neighbor_mines;\n    if (num_neighbor_mines === 0) {\n        for (const [x2, y2] of getNeighbors(x, y, HIDDEN_ENUMS)) {\n            detonate(x2, y2);\n        }\n    }\n}\n```\n\nThe second player action, `flag()` marks a blank cell as a suspected mine,\nand prevents it from being `detonate()`-ed.  When applied to an already\n`flag()`-ed cell, it reset the cell to its original blank state.\n\n```javascript\nfunction flag(x, y) {\n    const val = VIEW_DATA[x][y];\n    if (FLAG_ENUMS.has(val)) {\n        VIEW_DATA[x][y] += 2;\n    } else if (HIDDEN_ENUMS.has(val)) {\n        VIEW_DATA[x][y] -= 2;\n    }\n}\n```\n\nThe last, `check()`, is applied to an already `detonate()`-ed cell\nwith a number revealed.  If this cell has this same number of neighboring cells\n`flag()`-ed, then all remaining neighbor cells will be `detonate()`-ed.\n\n```javascript\nfunction check(x, y) {\n    const val = VIEW_DATA[x][y];\n    let num_neighbor_flags = 0;\n    for (const [] of getNeighbors(x, y, FLAG_ENUMS)) {\n        num_neighbor_flags++;\n    }\n\n    if (num_neighbor_flags === val) {\n        for (const [x1, y1] of getNeighbors(x, y, HIDDEN_ENUMS)) {\n            detonate(x1, y1);\n        }\n    }\n}\n```\n\n# AAA Graphics\n\nWe could easily reflect each cell's value to a table cell attribute, ala\n`<td data-value=\"3\">3<td>`, and implement the rest of our game's graphics\nas CSS selectors - but for the sake of readability, we'll group these as\nclasses.\n\n```javascript\nfunction styleListener() {\n    for (const td of table.querySelectorAll(\"td\")) {\n        const meta = table.getMeta(td);\n        const val = VIEW_DATA[meta.x][meta.y];\n        td.className = \"\";\n        td.classList.toggle(`hint-${val}`, HINT_ENUMS.has(val));\n        td.classList.toggle(\n            \"brick\",\n            HIDDEN_ENUMS.has(val) || FLAG_ENUMS.has(val)\n        );\n        td.classList.toggle(\"flag\", FLAG_ENUMS.has(val));\n        td.classList.toggle(\"exploded\", val === EXPLODED_ENUM);\n    }\n}\n```\n\nThe special cell types are pretty simple CSS built on this framework.  Hint\ncells are color coded.\n\n```css\n.hint-1 {\n    color: black;\n}\n.hint-2 {\n    color: indigo;\n}\n.hint-3 {\n    color: purple;\n}\n.hint-4 {\n    color: blue;\n}\n.hint-5 {\n    color: green;\n}\n.hint-6 {\n    color: yellow;\n}\n.hint-7 {\n    color: orange;\n}\n.hint-8 {\n    color: red;\n}\n```\n\nBrick cells have shadowed borders which create the illusion of depth and evoke\n... brickness ...\n\n```css\n.brick {\n    background-color: #999 !important; \n    border-top: 4px solid #CCC;\n    border-left: 4px solid #AAA;\n    border-bottom: 4px solid #666;\n    border-right: 4px solid #888;\n    font-size: 10px !important;\n    color: transparent;\n}\n```\n\nFlags have little reg flag icons provided by Material UI Icons.\n\n```css\n.flag:before {\n    color: red;\n    vertical-align: top;\n    content: \"flag\";\n    font-family: \"Material Icons\", monospace;\n}\n```\n\nLastly, when the player loses, we will show the revealed mine.\n\n```css\n.exploded {\n    background: red;\n}\n.exploded:before {\n    color: black;\n    vertical-align: top;\n    content: \"close\";\n    margin-left: 2.5px;\n    font-family: \"Material Icons\", monospace;\n}\n```\n\n# Player Controls\n\nLeft clicks are `detonate()` actions.\n\n```javascript\nasync function clickEventListener(event) {\n    if (event.target.tagName === \"TD\") {\n        const {x, y} = table.getMeta(event.target);\n        const val = VIEW_DATA[x][y];\n        if (HIDDEN_ENUMS.has(val)) {\n            detonate(x, y);\n        }\n        await table.draw();\n    }\n}\n```\n\nRight clicks are `flag()` actions on `.brick` cells, and `check()` actions on\n`detonate()`-ed cells.\n\n```javascript\nfunction contextMenuEventListener(event) {\n    event.preventDefault();\n    if (event.target.tagName === \"TD\") {\n        const {x, y} = table.getMeta(event.target);\n        const val = VIEW_DATA[x][y];\n        if (HINT_ENUMS.has(val)) {\n            check(x, y);\n        } else {\n            flag(x, y);\n        }\n        table.draw();\n    }\n}\n```\n\n# Main\n\n```javascript\nfunction init() {\n    table.setDataListener(dataListener);\n    table.addStyleListener(styleListener);\n    table.addEventListener(\"click\", clickEventListener);\n    table.addEventListener(\"contextmenu\", contextMenuEventListener);\n    table.draw();\n}\n\nwindow.addEventListener(\"load\", init);\n```\n\n## Appendix (Utilities)\n\nBasic CSS\n\n```css\nbody {\n    background: black;\n}\n```\n\n```css\nregular-table::-webkit-scrollbar,\nregular-table::-webkit-scrollbar-corner {\n    width: 16px;\n    height: 16px;\n}\nregular-table::-webkit-scrollbar-thumb {\n    background-color: #FFF !important;\n    border-radius: 0px;\n\n}\n```\n\n```css\nregular-table td {\n    max-width: 20px !important;\n    min-width: 20px !important;\n    height: 20px !important;\n    font-family: monospace;\n    font-weight: 700;\n    text-align: center;\n    padding: 0 !important;\n    font-size: 16px !important;\n    color: transparent;\n    background-color: white;\n}\nregular-table {\n    user-select: none;\n    padding: 0;\n}\nregular-table tr:hover td {\n    background: white;\n}\ntable tr:hover {\n    color: #333;\n}\nregular-table.game-over table {\n    pointer-events: none;\n}\n```\n\n## Appendix (Dependencies)\n\n```html\n<script src=\"/dist/umd/regular-table.js\"></script>\n<link rel='stylesheet' href=\"/dist/css/material.css\">\n```\n\n```block\nlicense: apache-2.0\n```\n\n"]}